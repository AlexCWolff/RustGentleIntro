/* It's no secret that parts of the Rust stdlib are implemented using 'unsafe'. This does not invalidate the conservative approach of the borrow checker. Remember that "unsafe" has a particular meaning; operations which Rust cannot fully verify at compile time. From Rust's perspective, C++ operates in unsafe mode all the time. If a large application needs a few dozen lines of unsafe code, then that's fine, since these few lines can be carefully checked by a human. Humans are not good at checking 100Kloc+ of code.

I mention this, because there appears to be a pattern: an experienced C++ person tries to implement a linked list or a tree structure, and gets frustrated. Well, a double-linked list is possible in safe Rust, with 'Rc' references going forward, and 'Weak' references going back. But the standard library gets more performance out of using pointers. */